{"version":3,"sources":["Components/Nav/Nav.js","Components/Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","useState","active","updateActive","Menu","color","inverted","className","Item","name","onClick","Calculator","currentAmount","updateAmount","currentCurrency","updateCurrentCurrency","foreignCurrency","updateForeignCurrency","rates","updateRates","error","updateError","useEffect","fetch","then","resp","json","USD","CAD","currencyElements","key","push","value","text","getKeyByValue","object","Object","keys","find","sort","a","b","length","usd","filter","item","cad","Segment","placeholder","Grid","columns","stackable","textAlign","Row","verticalAlign","Column","Form","Field","Input","size","label","defaultValue","onChange","e","parseInt","target","input","twoDecimal","parseFloat","test","checkError","Label","pointing","attached","Dropdown","selection","search","options","toFixed","App","Header","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.81078e86.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport './Nav.css'\r\n\r\nexport default function Nav(){\r\n    const [active, updateActive] = useState('calculator')\r\n\r\n    return(\r\n        <>\r\n        <Menu color='teal' inverted className=\"nav-bar\">\r\n            <Menu.Item\r\n            name='home'\r\n            active={active==='home'}\r\n            onClick={() => updateActive('home')}\r\n            >\r\n            The Financial Gym\r\n            </Menu.Item>\r\n\r\n            <Menu.Item\r\n            name='calculator'\r\n            active={active==='calculator'}\r\n            onClick={() => updateActive('calculator')}\r\n            >\r\n            Calculator\r\n            </Menu.Item>\r\n        </Menu>\r\n        </>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { Segment, Grid, Dropdown, Form, Label } from 'semantic-ui-react';\r\nimport './Calculator.css';\r\n\r\n\r\nexport default function Calculator() {\r\n    const [currentAmount, updateAmount] = useState(1);\r\n    const [currentCurrency, updateCurrentCurrency] = useState(null);\r\n    const [foreignCurrency, updateForeignCurrency] = useState(null);\r\n    const [rates, updateRates] = useState(null);\r\n    const [error, updateError] = useState(null);\r\n\r\n    //Fetch request for initial exchange rates.\r\n    useEffect(() => {\r\n        fetch('https://api.exchangeratesapi.io/latest')\r\n            .then((resp) => resp.json())\r\n            .then(json => {\r\n                updateRates(json.rates);\r\n                updateCurrentCurrency(json.rates.USD);\r\n                updateForeignCurrency(json.rates.CAD);\r\n            })    \r\n    }, []);\r\n    \r\n    //Create the initial array for currency values with name of currency as a key.\r\n    const currencyElements = [];\r\n\r\n    //Iterates through rates to create dropdown options\r\n    for(const key in rates){\r\n        currencyElements.push({ key: key, value: rates[key], text:key });\r\n    };\r\n\r\n    //Adds EUR as an option since it is the base exchange rate and not given from the API\r\n    currencyElements.push({key: 'EUR', value: 1, text:'EUR'});\r\n\r\n    //Sorts currencyElements in alphabetical order\r\n    currencyElements.sort((a, b) => {\r\n        if (a.text < b.text) {\r\n          return -1;\r\n        }\r\n        if (a.text > b.text) {\r\n          return 1;\r\n        }\r\n      \r\n        return 0;\r\n    });\r\n\r\n    //Checks if the amount is a valid number up to 2 decimal places\r\n    function checkError(input){\r\n        const twoDecimal = parseFloat(input);\r\n        var regexp = /^[0-9]*(\\.[0-9]{0,2})?$/;\r\n\r\n        //Checks if input is empty, passes the decimal test and is larger than zero.\r\n        if((typeof twoDecimal === 'number' && regexp.test(input) && twoDecimal > 0) || input === ''){\r\n            updateError(null);\r\n        }else{\r\n            updateError('Please enter a valid number to 2 decimal places');\r\n        }\r\n    }\r\n\r\n    //Gets the text value of the currency to exchange to\r\n    function getKeyByValue(object, value) {\r\n        if(object)\r\n            return Object.keys(object).find(key => object[key] === value);\r\n        return\r\n    }    \r\n\r\n    //This prevents the calculator from loading empty default values\r\n    if(currencyElements.length <= 1){\r\n        return (\r\n            <>\r\n            </>\r\n        )\r\n    }\r\n\r\n    //Sets up default values for the calculator\r\n    const usd = currencyElements.filter(item => item.text === 'USD')[0];\r\n    const cad = currencyElements.filter(item => item.text === 'CAD')[0];\r\n\r\n    return(\r\n        <Segment placeholder color='teal' className=\"calculator-segment\">\r\n            <Grid columns={3} stackable textAlign='center'>\r\n            <Grid.Row verticalAlign='middle'>\r\n                <Grid.Column>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <Form.Input size='huge' label='Enter Currency Amount' defaultValue={1} onChange={(e) => {updateAmount(parseInt(e.target.value)); checkError(e.target.value)}}/>\r\n                            {error}\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Grid.Column>\r\n        \r\n                <Grid.Column>\r\n                    <Segment>\r\n                        <Label color='teal' pointing='below' attached='top'>Current Currency</Label>\r\n                        <Dropdown\r\n                            defaultValue={usd.value}\r\n                            onChange={(e, {value}) => {updateCurrentCurrency(value)} }\r\n                            selection\r\n                            search\r\n                            options={currencyElements}\r\n                            />\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Label color='teal' pointing='below' attached='top'>Exchange To</Label>\r\n                        <Dropdown\r\n                            defaultValue={cad.value}\r\n                            onChange={(e, { value }) => updateForeignCurrency(value)}\r\n                            selection\r\n                            search\r\n                            options={currencyElements}\r\n                            />   \r\n                    </Segment>\r\n                             \r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    {/*The first line grabs the key from the rates object and display the key that matches with the currency rate value\r\n                        The second line calculates the exchange rate by using EUR as a base, reverting the current currency to the euro and changing it to the foreign currency.\r\n                    */}\r\n                    <Label color='teal' size='big'>Your amount in {getKeyByValue(rates, foreignCurrency) ? getKeyByValue(rates, foreignCurrency) : \"CAD\"}</Label>\r\n                    <Label size='big'>{currentAmount/currentCurrency*foreignCurrency > 0 ? parseFloat(currentAmount/currentCurrency*foreignCurrency).toFixed(2) : 0}</Label>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}","import './App.css';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport Nav from './Components/Nav/Nav';\nimport Calculator from './Components/Calculator/Calculator';\nimport { Container, Header, Segment } from 'semantic-ui-react';\n\nfunction App() {\n\n  return (\n    <>\n    <Nav/>\n    <Header textAlign='center'>Currency Exchange Calculator</Header>\n    <Container>\n      <Calculator/>\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}