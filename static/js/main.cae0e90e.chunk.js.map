{"version":3,"sources":["logo.svg","Components/Nav/Nav.js","Components/Calculator/Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["Nav","useState","active","updateActive","Menu","color","inverted","className","Item","name","onClick","Calculator","currentAmount","updateAmount","currentCurrency","updateCurrentCurrency","foreignCurrency","updateForeignCurrency","rates","updateRates","error","updateError","useEffect","fetch","then","resp","json","currencyElements","key","push","value","text","sort","a","b","Segment","placeholder","Grid","columns","stackable","textAlign","Row","verticalAlign","Column","Form","Field","Input","size","label","defaultValue","onChange","e","parseInt","target","onBlur","input","twoDecimal","parseFloat","test","checkError","Label","pointing","attached","Dropdown","selection","search","options","object","Object","keys","find","getKeyByValue","toFixed","App","Header","Container","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cae0e90e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React, {useState} from 'react';\r\nimport { Menu, Segment, Header } from 'semantic-ui-react';\r\nimport './Nav.css'\r\n\r\nexport default function Nav(){\r\n    const [active, updateActive] = useState('calculator')\r\n\r\n    return(\r\n        <>\r\n        <Menu color='teal' inverted className=\"nav-bar\">\r\n            <Menu.Item\r\n            name='home'\r\n            active={active==='home'}\r\n            onClick={() => updateActive('home')}\r\n            >\r\n            The Financial Gym\r\n            </Menu.Item>\r\n\r\n            <Menu.Item\r\n            name='calculator'\r\n            active={active==='calculator'}\r\n            onClick={() => updateActive('calculator')}\r\n            >\r\n            Calculator\r\n            </Menu.Item>\r\n        </Menu>\r\n        </>\r\n    )\r\n}","import React, {useState, useEffect} from 'react';\r\nimport { Container, Segment, Grid, Dropdown, Form, Label } from 'semantic-ui-react';\r\nimport './Calculator.css';\r\n\r\nfunction setTwoNumberDecimal(num){\r\n    const twoDecimal = parseFloat(num).toFixed(2);\r\n\r\n    return twoDecimal\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default function Calculator() {\r\n    const [currentAmount, updateAmount] = useState(1);\r\n    const [currentCurrency, updateCurrentCurrency] = useState(0);\r\n    const [foreignCurrency, updateForeignCurrency] = useState(0);\r\n    const [rates, updateRates] = useState(0);\r\n    const [error, updateError] = useState(null);\r\n\r\n    //Fetch request for initial exchange rates.\r\n    useEffect(() => {\r\n        fetch('https://api.exchangeratesapi.io/latest')\r\n              .then((resp) => resp.json())\r\n              .then(json => updateRates(json.rates))\r\n    }, []);\r\n    \r\n\r\n    //Create the initial array for currency values with name of currency as a key.\r\n    const currencyElements = [];\r\n    for(const key in rates){\r\n        currencyElements.push({ key: key, value: rates[key], text:key })\r\n    };\r\n\r\n    currencyElements.sort((a, b) => {\r\n        if (a.text < b.text) {\r\n          return -1;\r\n        }\r\n        if (a.text > b.text) {\r\n          return 1;\r\n        }\r\n      \r\n        // names must be equal\r\n        return 0;\r\n    });\r\n\r\n    //Checks if the amount is a valid number up to 2 decimal places\r\n    function checkError(input){\r\n        const twoDecimal = parseFloat(input);\r\n        var regexp = /^[0-9]*(\\.[0-9]{0,2})?$/;\r\n\r\n        //Checks if input is empty, passes the decimal test and is larger than zero.\r\n        if((typeof twoDecimal === 'number' && regexp.test(twoDecimal) && twoDecimal > 0) || input === ''){\r\n            updateError(null);\r\n        }else{\r\n            updateError('Please enter a valid number to 2 decimal places');\r\n        }\r\n    }\r\n\r\n    //Gets the text value of the currency to exchange to\r\n    function getKeyByValue(object, value) {\r\n        if(object)\r\n            return Object.keys(object).find(key => object[key] === value);\r\n        return\r\n    }\r\n\r\n    return(\r\n        <Segment placeholder color='teal' className=\"calculator-segment\">\r\n            <Grid columns={3} stackable textAlign='center'>\r\n            <Grid.Row verticalAlign='middle'>\r\n                <Grid.Column>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <Form.Input size='huge' label='Enter Currency Amount' defaultValue={1} onChange={(e) => updateAmount(parseInt(e.target.value))} onBlur={(e) => checkError(e.target.value)}/>\r\n                            {error}\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Grid.Column>\r\n        \r\n                <Grid.Column>\r\n                    <Segment>\r\n                        <Label color='teal' pointing='below' attached='top'>Current Currency</Label>\r\n                        <Dropdown\r\n                            defaultValue={1}\r\n                            onChange={(e, {value}) => updateCurrentCurrency(value)}\r\n                            placeholder='Select Country'\r\n                            selection\r\n                            search\r\n                            options={currencyElements}\r\n                            />\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Label color='teal' pointing='below' attached='top'>Exchange To</Label>\r\n                        <Dropdown\r\n                            defaultValue={1}\r\n                            onChange={(e, { value }) => updateForeignCurrency(value)}\r\n                            placeholder='Select Country'\r\n                            selection\r\n                            search\r\n                            options={currencyElements}\r\n                            />   \r\n                    </Segment>\r\n                             \r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <Label color='teal' size='big'>Your amount in {getKeyByValue(rates, foreignCurrency)}</Label>\r\n                    <Label size='big'>{currentAmount/currentCurrency*foreignCurrency > 0 ? parseFloat(currentAmount/currentCurrency*foreignCurrency).toFixed(2) : 0}</Label>\r\n                </Grid.Column>\r\n            </Grid.Row>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n}","import logo from './logo.svg';\nimport './App.css';\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport Nav from './Components/Nav/Nav';\nimport Calculator from './Components/Calculator/Calculator';\nimport { Container, Header, Segment } from 'semantic-ui-react';\n\nfunction App() {\n\n  return (\n    <>\n    <Nav/>\n    <Header textAlign='center'>Currency Exchange Calculator</Header>\n    <Container>\n      <Calculator/>\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}